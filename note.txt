- dùng React 17.0.2
- dùng CDN <script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script> dể dùng React không cần tải từ npm
- nếu dùng React CDN thì dùng console.log ra để thấy được các thuộc tính của React
    + React.version để kiểm tra phiên bản React Đang dùng
- React.createElement dùng để tạo 1 element, giống document.createElement
- React.createElement(type, props, child, child n,...);
- React.createElement(<element>, {<các thuộc tính của element>}, '<text node>');
    ex: const h1React = React.createElement('h1', {
        titile: 'hello',
        className: 'heading',
    }, 'hello React')   
    --> nếu muốn render ra phải dùng react-dom 

-> React.createElement thực tế không dùng, này để học cho biết. dùng JSX dễ hơn
- dùng ReactDOM 17.0.2
- dùng CDN <script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script> để dùng ReactDOM, ReactDOM dùng để render các element
- ReactDOM.render(element, container, callback). Hiện tại chưa dùng đến tham số callback
- dùng babel <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
- dùng thư viện babel để code JSX. không dùng React.createElement dài dòng nữa
- JSX có thể viết JS trong HTML, dùng dấu '{}'. Thêm type="text/babel" ở thẻ mở script trình duyệt nó mới nhận babel
    --> nếu không dùng type="text/babel" thì sẽ không code được JSX
- thuộc tính style trong JSX là 1 object
    + <p style={{color: 'red'}}>Hello</p>
- <React.Fragment>...</React.Fragment> viết được nhiều block element
- dùng function/class để chia component
- dùng props(props có kiểu dữ liệu là object) có thể truyền được tất cả kiểu dữ liệu, dùng kết hợp với destructuring
- tên các DOM event trong React là camelCase: onClick, onChange,...
- tên component đặt kiểu PascalCase, nếu không sẽ bị lỗi
- children props: là thuộc tính của props, children là nội dung bên trong 1 component
- dùng nodeJS chứ không dùng CDN link nữa
- npx create-react-app <tên project>: tạo project với ReactJS
- mặc định là React18 nên mình phải hạ xuống React17 (https://dev.to/ifeanyichima/how-to-downgrade-from-react-18-to-1702-818) để code theo F8 không bị lỗi
- npm start: chạy project trên trình duyệt
- các file trong folder public ở trình duyệt mới truy cập được, còn lại ở trình duyệt không truy cập được(bảo mật), khi React chạy thì file index.html trong folder public sẽ được chạy
- Hook chỉ được dùng trong function component, không dùng "this" như trong class component
- tạo folder hooks sử dụng các method của hook 
    + useState(): là các giá trị được lưu trữ trong component giá trị thay đổi thì giao diện sẽ thay đổi và component đó sẽ được re-render lại
        - syntax: const [state, setState] = useState(initState);
            + setState mới sẽ ghi đè state cũ, dùng kết hợp với spead để thêm state mà không bị ghi đè state cũ
            + initState bất cứ kiểu dữ liệu gì cũng được, nếu initState là 1 hàm thì initState sẽ lấy giá trị của hàm đó retrun về, và các giá trị trong initState chỉ được khởi tạo 1 lần duy nhất khi component render lần đầu
- truyền hàm cho các sự kiện:
    ex: function logger(){
            console.log(123);
        }
        JSX: 
        + <button onClick={logger}></button> //kiểu tham chiếu, khi click vào thì hàm mới thực thi
        + <button onClick={logger()}></button> // khi component render thì hàm sẽ thực thi luôn, chưa click mà đã thực thi, cách này sai 
        + <button onClick={() => logger()}></button> //cơ chế giống kiểu tham chiếu, nhưng sẽ truyền được tham số
- tips hay: dùng callback trong setState thì callback sẽ thực hiện sau khi component được re-render lại, React sẽ lên lịch cập nhật state và render lại, sau đó callback được truyền trong setState mới được thực thi s
- toán tử '??' (Nullish Coalescing Operator) để kiểm tra giá trị bên trái nếu là 'null' hoặc 'undefined' thì sẽ gán giá trị bên phải và ngược lại
    --> toán tử này được dùng lai lai toán tử 3 ngôi (ternary operator)